{
  "info": {
    "name": "Payment Service API",
    "description": "Complete testing collection for Razorpay Payment Service",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "order_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "payment_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/payments/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "payments", "health"]
        }
      },
      "response": []
    },
    {
      "name": "2. Generate JWT Token (Mock)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Mock JWT token for testing",
              "const jwt = require('jsonwebtoken');",
              "const payload = {",
              "    userId: 'test_user_123',",
              "    email: 'test@example.com',",
              "    iat: Math.floor(Date.now() / 1000),",
              "    exp: Math.floor(Date.now() / 1000) + (60 * 60) // 1 hour",
              "};",
              "",
              "const secret = 'test_jwt_secret_key_for_development_only';",
              "const token = jwt.sign(payload, secret);",
              "",
              "pm.collectionVariables.set('jwt_token', token);",
              "console.log('Generated JWT Token:', token);"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/payments/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "payments", "health"]
        }
      }
    },
    {
      "name": "3. Create Payment Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has order details', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success', true);",
              "    pm.expect(jsonData).to.have.property('order');",
              "    pm.expect(jsonData.order).to.have.property('id');",
              "    ",
              "    // Store order ID for next requests",
              "    pm.collectionVariables.set('order_id', jsonData.order.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": 500,\n  \"currency\": \"INR\",\n  \"receipt\": \"receipt_{{$randomInt}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/payments/create-order",
          "host": ["{{baseUrl}}"],
          "path": ["api", "payments", "create-order"]
        }
      }
    },
    {
      "name": "4. Capture Payment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Payment captured successfully', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success', true);",
              "    pm.expect(jsonData).to.have.property('payment');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"paymentId\": \"pay_test_{{$randomInt}}\",\n  \"amount\": 500\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/payments/capture",
          "host": ["{{baseUrl}}"],
          "path": ["api", "payments", "capture"]
        }
      }
    },
    {
      "name": "5. Webhook Simulation",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const crypto = require('crypto');",
              "",
              "const payload = {",
              "  \"event\": \"payment.captured\",",
              "  \"payload\": {",
              "    \"payment\": {",
              "      \"entity\": {",
              "        \"id\": \"pay_test_\" + Math.random().toString(36).substr(2, 9),",
              "        \"amount\": 50000,",
              "        \"currency\": \"INR\",",
              "        \"status\": \"captured\",",
              "        \"order_id\": pm.collectionVariables.get('order_id') || 'order_test_123',",
              "        \"method\": \"card\"",
              "      }",
              "    }",
              "  }",
              "};",
              "",
              "const webhookSecret = 'test_webhook_secret';",
              "const signature = crypto",
              "  .createHmac('sha256', webhookSecret)",
              "  .update(JSON.stringify(payload))",
              "  .digest('hex');",
              "",
              "pm.collectionVariables.set('webhook_payload', JSON.stringify(payload));",
              "pm.collectionVariables.set('webhook_signature', signature);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Webhook processed successfully', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Webhook response is valid', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status', 'ok');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "x-razorpay-signature",
            "value": "{{webhook_signature}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{webhook_payload}}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/payments/webhook",
          "host": ["{{baseUrl}}"],
          "path": ["api", "payments", "webhook"]
        }
      }
    },
    {
      "name": "6. Test Rate Limiting",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": 100,\n  \"currency\": \"INR\",\n  \"receipt\": \"rate_limit_test\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/payments/create-order",
          "host": ["{{baseUrl}}"],
          "path": ["api", "payments", "create-order"]
        }
      }
    },
    {
      "name": "7. Test Invalid Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Should return 401 for invalid token', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Should return error message', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer invalid_token"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": 500,\n  \"currency\": \"INR\",\n  \"receipt\": \"test_receipt\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/payments/create-order",
          "host": ["{{baseUrl}}"],
          "path": ["api", "payments", "create-order"]
        }
      }
    },
    {
      "name": "8. Test Validation Errors",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Should return 400 for validation error', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Should return validation error details', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('error', 'Validation failed');",
              "    pm.expect(jsonData).to.have.property('details');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"amount\": -500,\n  \"currency\": \"INVALID\",\n  \"receipt\": \"\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/payments/create-order",
          "host": ["{{baseUrl}}"],
          "path": ["api", "payments", "create-order"]
        }
      }
    }
  ]
}